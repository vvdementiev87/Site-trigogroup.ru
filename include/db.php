<?php
/**
 * файл db.php
 *
 * Пользовательский класс для создания подключения к СУБД MySQL,
 *  наследующий свойства и методы встроенного в PHP класса PDO
 */
class DB extends PDO {
  
  /**
   *  Параметры подключения к СУБД
   */
  public static $_aParams = array(
              
              'driver' => 'mysql',        // Используемый драйвер для соединения
              'host' => 'localhost',        // Адрес СУБД
              'dbname' => 'RAVTO',        // Кодировка соединения
              'username' => 'trigouser',        // Имя пользователя MySQL
              'password' => 'MyoXnCgpf7nBr2Em!',    // Пароль пользователя
              'params' => array(          // Дополнительные параметры подключения
    
                PDO::ATTR_PERSISTENT => true,   // Использовать постоянные подключения
                
              )
              
  );
  
  /**
   *  Защищенное статическое свойство, в котором будет храниться установленное подключение к СУБД
   */
  protected static $_dbh = NULL;
  
  /**
   *  Защищенное статическое свойство, в котором хранится статус наличия созданного экзепляра объекта нашего класса
   */
  protected static $_instance = FALSE;
  
  /**
    *  @brief Конструктор класса подключения к СУБД
   *  
   *  @details Частный метод, который не даст создать экземпляр класса стандартным способом
   *  в целях защиты от создания нескольких идентичных экземпляров нашего класса
   */
  private function __construct() {
    
    // Нет необходимости нагружать функцию-конструктор лишними действиями
    // Установку соединения доверим защищенному методу класса 
    $this->_connect();
    
    ++self::$count;
  }
  
  /**
    *  @brief Защищенный метод для установки подключения к СУБД
   */
  protected function _connect() {
    
    // Используя имеющиеся параметры подключения подключимся к СУБД
    $dsn = self::$_aParams[ 'driver' ] . ':host=' .
        self::$_aParams[ 'host' ] . ';dbname=' . 
        self::$_aParams[ 'dbname' ] . ';charset=' . 
        self::$_aParams[ 'charset' ];
    
    /**
     *  Устанавливаем подключение с СУБД
     *
     * Строку с параметрами сервера мы сформировали выше
     * Теперь добавляем еще имя пользователя, пароль пользователя 
     * и дополнителные параметры подключения
     *
     * Используется именно такая конструкция: parent::__construct(),
     * которая вызывает конструктор родительского класса PDO
     */ 
    // Пытаемся установить соединение с СУБД
    try {
    
      parent::__construct( $dsn, self::$_aParams[ 'username' ], self::$_aParams[ 'password' ], self::$_aParams[ 'params' ]  );
    
    }
    // Если соединение установить не удастся, будет выброшено исключение типа PDOException,
    // которое мы перехватим
    catch ( PDOException $e ) {
      
      // Передадим на обработку исключение нашему классу
      MyPDOException::instance( $e );
      
      // Так как подключиться к СУБД не удалось, в дальнейшем выполнении кода
      // сценария нет никакого смысла
      exit();
      
    }
    
    // Дальнейший код будет исполнен в случае успешной установки
    // соединения с СУБД
    
    // Ниже используем именно псевдопеременную $this, так как 
    // наш класс унаследовал все допустимые свойства и методы от класса 
    // PDO, и это псевдопеременная ссылается именно на свойства и методы 
    // класса PDO, если они не определены в нашем классе
    
    // Устанавливаем режим обработки ошибок,
    // используя для этого метод setAttribute() объекта PDO
    $this->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Устанавливаем режим выборки по умолчанию для объекта запроса,
    // используя для этого метод setAttribute() объекта PDO
    $this->setAttribute( PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC );
    
    // После того, как будут выполнены все действия 
    // установить значение TRUE для свойства, в котором хранится информация
    // о существовании созданного объекта нашего класса
    self::$_instance = TRUE;
    
    // Сохраняем в статическое свойство экземпляр объекта, подключенный к СУБД
    self::$_dbh = $this;
    
  }
  
  /**
    *  @brief статический метод получения экзепляра объекта класса подключения к СУБД
   *  
   *  @return свойство, в котором хранится подключение к СУБД
   *  
   */
  public static function instance() {
    
    // Если ранее был создан экземпляр объекта этого класса
    if ( self::$_instance !== FALSE ) {
      
      // Вернуть этот экземпляр объекта
      return self::$_dbh;
      
    }
    
    // Если методу были переданы какие-либо аргументы
    if ( func_num_args() > 0 ) {
      
      // Сохраним переданный аргумент в переменную
      // Нас интересует лишь первый аргумент, если он был передан
      $aParams = func_get_args()[ 0 ];
      
      // Параметры должны передаваться в виде массива и никак иначе
      if( is_array( $aParams ) ) {
        
        // Передаем параметры конструктору класса, создаем экземпляр класса
        return new self( $aParams );
        
      }
      
    }
    
    // Создаем экземпляр класса
    return new self();
    
    // Всё остальное будет проигнорировано
    
  }
  
  /**
   *  Статическое защищенное свойство, которое будет увеличиваться на 1
   *  при каждом создании экземпляра объекта нашего класса. Служит только
   *  для того, чтобы вы могли проверить, действительно ли нельзя создать
   *  несколько экземпляров объектов нашего класса
   */
  protected static $count = 0;
  
  /**
    *  @brief Получение значений счетчика экземпляров объекта класса
   *  
   *  @return число созданных экземпляров
   */
  public static function getCount() {
    
    return self::$count;
    
  }
  
}
?>